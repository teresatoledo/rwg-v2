2. Configuración de Prisma
Instala Prisma y configúralo:

bash
Copiar código
npm install @prisma/client
npx prisma init
Define tu modelo en prisma/schema.prisma:

prisma/schema.prisma

prisma
Copiar código
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Exercise {
  id          Int      @id @default(autoincrement())
  name        String
  records     Record[]
}

model Record {
  id          Int      @id @default(autoincrement())
  date        DateTime
  repetitions Int
  weight      Float
  exerciseId  Int
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
}
Ejecuta las migraciones para crear la base de datos:

bash
Copiar código
npx prisma migrate dev --name init
3. Creación del Componente
Ahora, crea un componente de buscador y lista de ejercicios en components/ExerciseList.js.

components/ExerciseList.js

jsx
Copiar código
import { useState } from "react";
import { PrismaClient } from "@prisma/client";
const prisma = new PrismaClient();

const ExerciseList = ({ exercises }) => {
  const [search, setSearch] = useState("");
  const [selectedExercise, setSelectedExercise] = useState(null);
  const [form, setForm] = useState({ date: "", repetitions: "", weight: "" });

  const handleSearch = (e) => {
    setSearch(e.target.value);
  };

  const handleSelectExercise = (exercise) => {
    setSelectedExercise(exercise);
  };

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    await fetch("/api/addRecord", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        exerciseId: selectedExercise.id,
        ...form,
      }),
    });
    setForm({ date: "", repetitions: "", weight: "" });
    setSelectedExercise(null);
  };

  const filteredExercises = exercises.filter((exercise) =>
    exercise.name.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div className="p-4">
      <input
        type="text"
        value={search}
        onChange={handleSearch}
        placeholder="Buscar ejercicios"
        className="p-2 border border-gray-300 rounded mb-4 w-full"
      />
      <ul>
        {filteredExercises.map((exercise) => (
          <li
            key={exercise.id}
            className="p-2 border-b border-gray-200 cursor-pointer"
            onClick={() => handleSelectExercise(exercise)}
          >
            {exercise.name}
          </li>
        ))}
      </ul>
      {selectedExercise && (
        <div className="mt-4 p-4 border border-gray-300 rounded">
          <h3 className="mb-2">Añadir RM para {selectedExercise.name}</h3>
          <form onSubmit={handleSubmit}>
            <input
              type="date"
              name="date"
              value={form.date}
              onChange={handleChange}
              className="p-2 border border-gray-300 rounded mb-2 w-full"
            />
            <input
              type="number"
              name="repetitions"
              value={form.repetitions}
              onChange={handleChange}
              placeholder="Repeticiones"
              className="p-2 border border-gray-300 rounded mb-2 w-full"
            />
            <input
              type="number"
              name="weight"
              value={form.weight}
              onChange={handleChange}
              placeholder="Peso"
              className="p-2 border border-gray-300 rounded mb-2 w-full"
            />
            <button
              type="submit"
              className="p-2 bg-blue-500 text-white rounded w-full"
            >
              Añadir
            </button>
          </form>
        </div>
      )}
    </div>
  );
};

export async function getServerSideProps() {
  const exercises = await prisma.exercise.findMany();
  return {
    props: {
      exercises,
    },
  };
}

export default ExerciseList;
4. Creación de la API Route
Crea un API route para manejar la adición de registros en pages/api/addRecord.js.

pages/api/addRecord.js

js
Copiar código
import { PrismaClient } from "@prisma/client";
const prisma = new PrismaClient();

export default async function handler(req, res) {
  if (req.method === "POST") {
    const { exerciseId, date, repetitions, weight } = req.body;
    try {
      const newRecord = await prisma.record.create({
        data: {
          date: new Date(date),
          repetitions: parseInt(repetitions),
          weight: parseFloat(weight),
          exerciseId: parseInt(exerciseId),
        },
      });
      res.status(200).json(newRecord);
    } catch (error) {
      res.status(500).json({ error: "Error adding record" });
    }
  } else {
    res.status(405).json({ error: "Method not allowed" });
  }
}
5. Uso del Componente
Finalmente, usa el componente en tu página principal (pages/index.js).

pages/index.js

jsx
Copiar código
import ExerciseList, { getServerSideProps } from "../components/ExerciseList";

export { getServerSideProps };

export default function Home({ exercises }) {
  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Lista de Ejercicios</h1>
      <ExerciseList exercises={exercises} />
    </div>
  );
}
Con esto tendrás un componente que permite buscar ejercicios, seleccionar uno, y añadir registros con fecha, repeticiones y peso. Los registros se guardarán en la base de datos usando Prisma.

para que sirve prisma
ChatGPT
Prisma es una herramienta ORM (Object-Relational Mapping) moderna que simplifica la interacción con bases de datos en aplicaciones Node.js y TypeScript. Proporciona una manera intuitiva y eficiente de trabajar con bases de datos relacionales mediante la generación de un cliente que permite realizar consultas y operaciones de manera tipada y segura. Aquí te presento algunas de las principales ventajas y características de Prisma:

Características y Ventajas de Prisma
Generación Automática de Cliente Tipado:

Prisma genera un cliente tipado automáticamente basado en el esquema de tu base de datos. Esto significa que puedes beneficiarte de la autocompletación y la verificación de tipos en tu editor, lo que reduce errores y aumenta la productividad.
Esquema Declarativo:

Utiliza un archivo de esquema (schema.prisma) donde defines tus modelos de datos y relaciones entre ellos. Esto proporciona una visión clara y coherente de la estructura de tu base de datos.
Migraciones de Base de Datos:

Prisma facilita la gestión de migraciones de base de datos. Puedes crear, aplicar y revertir migraciones, asegurando que la estructura de tu base de datos esté siempre sincronizada con tu modelo de datos.
Consultas Eficientes y Poderosas:

Prisma proporciona un API para realizar consultas complejas de manera sencilla y eficiente. Soporta operaciones CRUD (Create, Read, Update, Delete) y relaciones entre modelos.
Compatibilidad con Múltiples Bases de Datos:

Prisma es compatible con varias bases de datos, incluidas PostgreSQL, MySQL, SQLite, SQL Server y MongoDB.
Desarrollo Local y Producción:

Prisma se adapta tanto al desarrollo local como a entornos de producción. Puedes probar tus cambios localmente y luego desplegarlos en un entorno de producción con confianza.
Prisma Studio:

Prisma incluye Prisma Studio, una interfaz gráfica que te permite visualizar y editar datos directamente en tu base de datos. Es una herramienta muy útil para desarrolladores.
Cómo Funciona Prisma en el Proyecto
En el contexto del proyecto que hemos creado, Prisma se encarga de las siguientes tareas:

Definición del Esquema:

En el archivo prisma/schema.prisma, defines los modelos Exercise y Record, así como sus relaciones.
prisma
Copiar código
model Exercise {
  id          Int      @id @default(autoincrement())
  name        String
  records     Record[]
}

model Record {
  id          Int      @id @default(autoincrement())
  date        DateTime
  repetitions Int
  weight      Float
  exerciseId  Int
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
}
Generación del Cliente:

Al ejecutar npx prisma generate, Prisma genera un cliente basado en el esquema definido. Este cliente se utiliza para interactuar con la base de datos de manera segura y tipada.
Migraciones:

Utilizando npx prisma migrate dev --name init, Prisma crea las tablas correspondientes en la base de datos y gestiona el historial de cambios en la estructura de la base de datos.
Operaciones CRUD:

En el archivo pages/api/addRecord.js, usamos el cliente de Prisma para crear nuevos registros en la base de datos cuando se envían desde el formulario.
js
Copiar código
import { PrismaClient } from "@prisma/client";
const prisma = new PrismaClient();

export default async function handler(req, res) {
  if (req.method === "POST") {
    const { exerciseId, date, repetitions, weight } = req.body;
    try {
      const newRecord = await prisma.record.create({
        data: {
          date: new Date(date),
          repetitions: parseInt(repetitions),
          weight: parseFloat(weight),
          exerciseId: parseInt(exerciseId),
        },
      });
      res.status(200).json(newRecord);
    } catch (error) {
      res.status(500).json({ error: "Error adding record" });
    }
  } else {
    res.status(405).json({ error: "Method not allowed" });
  }
}
Conclusión
Prisma simplifica la interacción con bases de datos en aplicaciones Next.js, proporcionando una experiencia de desarrollo más productiva, segura y eficiente. La combinación de su cliente tipado, sistema de migraciones y herramientas adicionales como Prisma Studio lo hacen una opción poderosa para gestionar bases de datos relacionales en proyectos modernos.

prisma es compatible con una base de datos mysql?
ChatGPT
Sí, Prisma es compatible con MySQL, lo que significa que puedes utilizarlo para interactuar con bases de datos MySQL en tus proyectos. Prisma proporciona soporte oficial para MySQL, junto con otros sistemas de gestión de bases de datos relacionales como PostgreSQL, SQLite, SQL Server, y también ofrece compatibilidad experimental con MongoDB.

Para utilizar Prisma con MySQL, necesitarás configurar tu proyecto para que se conecte a una base de datos MySQL y definir el esquema de tu base de datos en el archivo schema.prisma. Aquí hay un ejemplo básico de cómo podría ser el archivo schema.prisma para una base de datos MySQL:

prisma
Copiar código
// schema.prisma

// Define el origen de datos para MySQL
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // URL de conexión a tu base de datos MySQL
}

// Define el modelo de tus datos
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  posts     Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}
Después de definir tu esquema, necesitarás ejecutar el comando npx prisma generate para generar el cliente de Prisma para tu proyecto, que te permitirá interactuar con la base de datos de manera segura y tipada desde tu código.

Además, necesitarás especificar la URL de conexión a tu base de datos MySQL en el archivo de configuración de tu proyecto. La URL de conexión puede ser algo similar a mysql://usuario:contraseña@host:puerto/base_de_datos.

En resumen, sí, Prisma es compatible con MySQL y te proporciona una forma conveniente y segura de interactuar con bases de datos MySQL en tus proyectos de Node.js y TypeScript.